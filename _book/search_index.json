[["Week1.html", "Week 1: Importing Genetic Data", " Week 1: Importing Genetic Data In this first lab of the course, we will explore different ways of importing genetic data into R. Along the way, we will learn about data models in R and how to avoid common errors. "],["video-1a.html", "View Course Video", " View Course Video Preview Slides Download "],["tutorial-1.html", "Interactive Tutorial 1", " Interactive Tutorial 1 Instructions a) Goal: … b) How to access tutorials: c) How to complete tutorial: d) How to submit answers (participating institutions only): List of R commands used Function Package data utils View utils write.csv utils read.csv utils head utils class base lapply base as.character base read_csv readr read_population gstudio df2genind adegenet dim base "],["WE-1.html", "Worked Example", " Worked Example 1. Overview of Worked Example a. Goals This worked example shows: How microsatellite data may be coded in a spreadsheet. How such a file is imported into R. How the data are imported into a ‘genind’ object using package ‘adegenet.’ How to view information stored in a ‘genind’ object. How to import the data with the ‘gstudio’ package. Try modifying the code to import your own data! b. Data set This code imports genetic data from 181 individuals of Colombia spotted frogs (Rana luteiventris) from 12 populations. The data are a subsample of the full data set analyzed in Funk et al. (2005) and Murphy et al. (2010). Please see the separate introduction to the data set. ralu.loci: Data frame with populations and genetic data (181 rows x 9 columns). Included in package LandGenCourse. c. Required R libraries Install some packages needed for this worked example. Note: popgraph needs to be installed before installing gstudio. ## Loading required package: adegenet ## Loading required package: ade4 ## Registered S3 method overwritten by &#39;spdep&#39;: ## method from ## plot.mst ape ## ## /// adegenet 2.1.3 is loaded //////////// ## ## &gt; overview: &#39;?adegenet&#39; ## &gt; tutorials/doc/questions: &#39;adegenetWeb()&#39; ## &gt; bug reports/feature requests: adegenetIssues() Note: the function library will always load the package, even if it is already loaded, whereas require will only load it if it is not yet loaded. Either will work. 2. Import data from .csv file a. Preparation Create a new R project for this lab: File &gt; New Project &gt; New Directory &gt; New Project. This will automatically set your working directory to the new project folder. That’s where R will look for files and save anything you export. Note: R does not distinguish between single quotes and double quotes, they are treated as synonyms, but the opening and closing symbols need to match. The dataset ralu.loci is available in the package ‘LandGenCourse’ and can be loaded with data(ralu.loci). Below, however, we’ll import it from a comma separated file (.csv), as this is the recommended format for importing your own data (e.g. from Excel). b. Excel file First we need to copy the file ralu.loci.csv to the downloads folder inside your project folder. The first line checks that the folder downloads exists and creates it if needed. ## [1] FALSE Check that the file ralu.loci.csv is now in the folder downloads within your project folder. From your file system, you can open it with Excel. Note that in Excel, the columns with the loci must be explicitly defined as ‘text,’ otherwise Excel is likely to interpret them as times. Excel instructions: Opening an existing .csv file with genetic data: Excel menu: ‘File &gt; New Workbook.’ Excel menu: ‘File &gt; Import &gt; CSV File &gt; Import.’ Navigate to file. Text Import Wizard: select ‘Delimited,’ click ‘Next.’ Delimiters: check ‘comma.’ Click ‘Next.’ Use the ‘Shift’ key to select all columns with loci A - H. Select ‘text.’ Click ‘Finish &gt; OK.’ Creating a new Excel file to enter genetic data: Label the loci columns. Select all loci columns by clicking on the column headers (hold the ‘Shift’ key to select multiple adjacent columns). Define the data format: ‘Format &gt; Cell &gt; Text.’ Enter genetic data, separating the alleles by a colon (e.g., ‘1:3’). Saving Excel file for import in R: File Format: ‘Comma Separated Values (.csv)’ Here is a screenshot of the first few lines of the Excel file with the genetic data: c. Import with function ‘read.csv’ As the file is saved in csv format, we use the function ‘read.csv’ to import it into an R object called ‘Frogs.’ Display the first few rows and columns to check whether the data have been imported correctly: ## # A tibble: 181 x 10 ## SiteName Pop A B C D E F G H ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 AirplaneLake Airplane 1:1 1:1 1:1 1:1 1:2 1:1 1:1 4:5 ## 2 AirplaneLake Airplane 2:2 1:1 NA:NA 1:1 1:1 NA:NA 2:2 NA:NA ## 3 AirplaneLake Airplane 1:1 1:1 1:1 1:1 3:3 1:1 1:1 3:3 ## 4 AirplaneLake Airplane 1:1 1:1 NA:NA 2:2 1:2 NA:NA NA:NA NA:NA ## 5 AirplaneLake Airplane 1:2 1:3 1:1 1:1 1:2 1:1 1:2 4:5 ## 6 AirplaneLake Airplane 1:2 1:1 1:1 3:1 1:1 1:1 1:2 4:5 ## 7 AirplaneLake Airplane 2:2 1:3 1:1 1:1 3:3 1:1 1:1 2:3 ## 8 AirplaneLake Airplane 2:2 1:3 1:1 1:1 3:3 1:1 1:1 2:3 ## 9 AirplaneLake Airplane 3:1 1:1 1:1 1:1 1:7 1:1 1:1 3:5 ## 10 AirplaneLake Airplane 2:2 1:3 1:1 1:1 3:7 1:1 1:1 3:3 ## # … with 171 more rows The data frame ‘Frogs’ contains 181 rows and 11 columns. Only the first few are shown. The file has a header row with column names. Notice the abbreviations for the R data type under each variable name: &lt;fctr&gt; means that the variable has been coded as a factor. Each row is one individual. Note that for this data set, there is no column with ID or names of individuals. The first two columns indicates the site in long (“SiteName”) and short (“Pop”) format. There are 8 columns with loci, named A - H. Each locus has two alleles, coded with numbers and separated by a colon (:). This coding suggests that the markers are codominant and that the species is diploid. The code for missing values is NA, (which shows up as NA:NA for missing genetic data). There seem to be quite a few missing values. d. Create ID variable We’ll add unique ID’s for the frogs (to show how these would be imported). Here we take, for each frog, a substring of Pop containing the first three letters, add the row number, and separate them by a period. ## # A tibble: 181 x 11 ## FrogID SiteName Pop A B C D E F G H ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Air.1 AirplaneLake Airplane 1:1 1:1 1:1 1:1 1:2 1:1 1:1 4:5 ## 2 Air.2 AirplaneLake Airplane 2:2 1:1 NA:NA 1:1 1:1 NA:NA 2:2 NA:NA ## 3 Air.3 AirplaneLake Airplane 1:1 1:1 1:1 1:1 3:3 1:1 1:1 3:3 ## 4 Air.4 AirplaneLake Airplane 1:1 1:1 NA:NA 2:2 1:2 NA:NA NA:NA NA:NA ## 5 Air.5 AirplaneLake Airplane 1:2 1:3 1:1 1:1 1:2 1:1 1:2 4:5 ## 6 Air.6 AirplaneLake Airplane 1:2 1:1 1:1 3:1 1:1 1:1 1:2 4:5 ## 7 Air.7 AirplaneLake Airplane 2:2 1:3 1:1 1:1 3:3 1:1 1:1 2:3 ## 8 Air.8 AirplaneLake Airplane 2:2 1:3 1:1 1:1 3:3 1:1 1:1 2:3 ## 9 Air.9 AirplaneLake Airplane 3:1 1:1 1:1 1:1 1:7 1:1 1:1 3:5 ## 10 Air.10 AirplaneLake Airplane 2:2 1:3 1:1 1:1 3:7 1:1 1:1 3:3 ## # … with 171 more rows e. Export with function ‘write.csv’ If you want to export (and import) your own files, adapt this code. Note: when using R Notebooks, problems can arise if R looks for files in a different place (more on this in Week 8 Bonus material). This is a safe work-around that will help make your work reproducible and transferable to other computers. For this to work properly, you must work within an R project, and you must have writing permission for the project folder. The function here from the package here finds the path to your project folder. Remove the hashtags and run the two lines to see the path to your project folder, and the path to the (to be created) output folder. The function paste0 simply pastes strings of text together, without any separator (hence the ‘0’ in the function name). The following line checks whether an output folder exists in the project folder, and if not, creates one. Now we can write our data into a csv file in the output folder: To import the file again from the output folder, you could do this: 3. Create ‘genind’ Object a. Read the helpfile We use the function df2genind of the adegenet package to import the loci into a genind object named Frogs.genind. Check the help file for a definition of all arguments and for example code. b. Set all arguments of function ‘df2genind’ Some explanations: X: this is the data frame (or matrix) containing the loci only. Hence we need columns 4 - 11. sep: need to specify the separator between alleles (here: colon) ncode: not needed here because we used a separator, defined under sep. ind.names: here we should indicate the column FrogID. loc.names: by default this will use the column names of the loci. pop: here we should indicate either the column Pop or SiteName. NA.char: how were missing values coded? Here: NA. ploidy: this species is diploid, hence 2. type: marker type, either \"codom\" for codominant markers like microsatellites, or \"PA\" for presence-absence, such as SNP or AFLP markers. Note: you can use either \"\" or ’’. strata: one way of defining hierarchical sampling levels. We will add this in Week 3. hierarchy: another way of defining hierarchical sampling levels. We’ll skip it for now. c. Check imported data Printing the genind object’s name lists the number of individuals, loci and alleles, and lists all slots (prefaced by @). ## /// GENIND OBJECT ///////// ## ## // 181 individuals; 8 loci; 39 alleles; size: 55.2 Kb ## ## // Basic content ## @tab: 181 x 39 matrix of allele counts ## @loc.n.all: number of alleles per locus (range: 3-9) ## @loc.fac: locus factor for the 39 columns of @tab ## @all.names: list of allele names for each locus ## @ploidy: ploidy of each individual (range: 2-2) ## @type: codom ## @call: df2genind(X = Frogs[, c(4:11)], sep = &quot;:&quot;, ncode = NULL, ind.names = Frogs$FrogID, ## loc.names = NULL, pop = Frogs$Pop, NA.char = &quot;NA&quot;, ploidy = 2, ## type = &quot;codom&quot;, strata = NULL, hierarchy = NULL) ## ## // Optional content ## @pop: population of each individual (group size range: 7-23) d. Summarize ‘genind’ object There is a summary function for genind objects. Notes: Group here refers to the populations, i.e., Group sizes means number of individuals per population. It is a good idea to check the percentage of missing values here. If it is 0%, this may indicate that the coding for missing values was not recognized. If the % missing is very high, on the other hand, there may be some other importing problem. ## ## // Number of individuals: 181 ## // Group sizes: 21 8 14 13 7 17 9 20 19 13 17 23 ## // Number of alleles per locus: 3 4 4 4 9 3 4 8 ## // Number of alleles per group: 21 21 20 22 20 19 19 25 18 14 18 26 ## // Percentage of missing data: 10.64 % ## // Observed heterozygosity: 0.1 0.4 0.09 0.36 0.68 0.02 0.38 0.68 ## // Expected heterozygosity: 0.17 0.47 0.14 0.59 0.78 0.02 0.48 0.74 4. View information stored in ‘genind’ object The summary lists each attribute or slot of the genind object and summarizes its content. Technically speaking, genind objects are S4 objects in R, which means that their slots are accessed with the @ sign, rather than the $ sign for attributes of the more commonly used S3 objects. Interestingly, the object does not store the data table that was imported, but converts it to a table of allele counts. a. Slot @tab Table with allele counts, where each column is an allele. Allele name A.1 means “locus A, allele 1.” For a codominant marker (e.g. microsatellite) and a diploid species, allele counts per individual can be 0, 1, 2, or NA=missing. Here are the first few lines: ## # A tibble: 181 x 39 ## A.1 A.2 A.3 B.1 B.3 B.2 B.4 C.1 C.2 C.4 C.5 D.1 D.2 ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 2 0 0 2 0 0 0 2 0 0 0 2 0 ## 2 0 2 0 2 0 0 0 NA NA NA NA 2 0 ## 3 2 0 0 2 0 0 0 2 0 0 0 2 0 ## 4 2 0 0 2 0 0 0 NA NA NA NA 0 2 ## 5 1 1 0 1 1 0 0 2 0 0 0 2 0 ## 6 1 1 0 2 0 0 0 2 0 0 0 1 0 ## 7 0 2 0 1 1 0 0 2 0 0 0 2 0 ## 8 0 2 0 1 1 0 0 2 0 0 0 2 0 ## 9 1 0 1 2 0 0 0 2 0 0 0 2 0 ## 10 0 2 0 1 1 0 0 2 0 0 0 2 0 ## # … with 171 more rows, and 26 more variables: D.3 &lt;int&gt;, D.4 &lt;int&gt;, E.1 &lt;int&gt;, ## # E.2 &lt;int&gt;, E.3 &lt;int&gt;, E.7 &lt;int&gt;, E.6 &lt;int&gt;, E.8 &lt;int&gt;, E.5 &lt;int&gt;, ## # E.4 &lt;int&gt;, E.10 &lt;int&gt;, F.1 &lt;int&gt;, F.2 &lt;int&gt;, F.3 &lt;int&gt;, G.1 &lt;int&gt;, ## # G.2 &lt;int&gt;, G.3 &lt;int&gt;, G.5 &lt;int&gt;, H.4 &lt;int&gt;, H.5 &lt;int&gt;, H.3 &lt;int&gt;, ## # H.2 &lt;int&gt;, H.1 &lt;int&gt;, H.6 &lt;int&gt;, H.8 &lt;int&gt;, H.7 &lt;int&gt; b. Slot @loc.n.all Number of alleles per locus, across all populations. ## A B C D E F G H ## 3 4 4 4 9 3 4 8 c. Slot @loc.fac This is a factor that indicates for each allele (column in @tab) which locus it belongs to. The levels of the factor correspond to the loci. ## [1] A A A B B B B C C C C D D D D E E E E E E E E E F F F G G G G H H H H H H H ## [39] H ## Levels: A B C D E F G H d. Slot @all.names List of allele names, separately for each locus. Note: the alleles are treated as text (character), even if they are coded as numbers. They are sorted in order of occurrence in data set. ## $A ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; ## ## $B ## [1] &quot;1&quot; &quot;3&quot; &quot;2&quot; &quot;4&quot; ## ## $C ## [1] &quot;1&quot; &quot;2&quot; &quot;4&quot; &quot;5&quot; ## ## $D ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ## ## $E ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;7&quot; &quot;6&quot; &quot;8&quot; &quot;5&quot; &quot;4&quot; &quot;10&quot; ## ## $F ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; ## ## $G ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;5&quot; ## ## $H ## [1] &quot;4&quot; &quot;5&quot; &quot;3&quot; &quot;2&quot; &quot;1&quot; &quot;6&quot; &quot;8&quot; &quot;7&quot; e. Further slots The following slots are automatically filled with default values unless specified by user during import into genind object: Slot @ploidy: ploidy for each individual. Slot @type: codominant (microsatellites) or presence/absence (SNP, AFLP) The following slots may be empty unless specified during or after import into ‘genind’ object: Slot @other: placeholder for non-genetic data, e.g. spatial coordinates of individuals. Slot @pop: vector indicating the population that each individual belongs to. Slot @strata: stratification of populations, e.g. within regions or treatments. Slot @hierarchy: optional formula defining hierarchical levels in strata. 5. Import data with ‘gstudio’ package a. Function ‘read_population’ While ‘genind’ objects are used by many functions for analyzing genetic data, the gstudio package provides an interface for additional analysis. We use the function read_population to import the data. b. Set arguments Some explanations: path: This is the path to the .csv file. If it is in the current working directory, then the filename is sufficient. type: here we have ‘separated’ data, as the alleles at each locus are separated by a colon. locus.columns: this would be columns 3 - 10 in this case, because we are importing from the .csv file directly, which does not contain the FrogID variable. We can add that later. phased: default is fine here. sep: here this refers to the .csv file! The separater is a comma. header: yes we have column names. Working directory confusion: If you are working within an R project folder, then that folder is automatically set as your working directory. If you are working in an R session outside of an R project, then you need to actively set the working directory in the R Studio menu under: Session &gt; Set working directory &gt; Choose Directory. c. Check imported data Check the column types: SiteName and Pop are now character vectors, and the loci columns A - H are now of class locus (it is indicated that ‘locus’ is a S3 object type). ## &#39;data.frame&#39;: 181 obs. of 10 variables: ## $ SiteName: chr &quot;AirplaneLake&quot; &quot;AirplaneLake&quot; &quot;AirplaneLake&quot; &quot;AirplaneLake&quot; ... ## $ Pop : chr &quot;Airplane&quot; &quot;Airplane&quot; &quot;Airplane&quot; &quot;Airplane&quot; ... ## $ A : &#39;locus&#39; chr &quot;1:1&quot; &quot;2:2&quot; &quot;1:1&quot; &quot;1:1&quot; ... ## $ B : &#39;locus&#39; chr &quot;1:1&quot; &quot;1:1&quot; &quot;1:1&quot; &quot;1:1&quot; ... ## $ C : &#39;locus&#39; chr &quot;1:1&quot; &quot;&quot; &quot;1:1&quot; &quot;&quot; ... ## $ D : &#39;locus&#39; chr &quot;1:1&quot; &quot;1:1&quot; &quot;1:1&quot; &quot;2:2&quot; ... ## $ E : &#39;locus&#39; chr &quot;1:2&quot; &quot;1:1&quot; &quot;3:3&quot; &quot;1:2&quot; ... ## $ F : &#39;locus&#39; chr &quot;1:1&quot; &quot;&quot; &quot;1:1&quot; &quot;&quot; ... ## $ G : &#39;locus&#39; chr &quot;1:1&quot; &quot;2:2&quot; &quot;1:1&quot; &quot;&quot; ... ## $ H : &#39;locus&#39; chr &quot;4:5&quot; &quot;&quot; &quot;3:3&quot; &quot;&quot; ... d. Add FrogID Frogs.gstudio is a data frame, and we can manipulate like any other data frame. Here we will add the variable FrogID as the first column. ## FrogID SiteName Pop A B C D E F G H ## 1 Air.1 AirplaneLake Airplane 1:1 1:1 1:1 1:1 1:2 1:1 1:1 4:5 ## 2 Air.2 AirplaneLake Airplane 2:2 1:1 1:1 1:1 2:2 ## 3 Air.3 AirplaneLake Airplane 1:1 1:1 1:1 1:1 3:3 1:1 1:1 3:3 ## 4 Air.4 AirplaneLake Airplane 1:1 1:1 2:2 1:2 ## 5 Air.5 AirplaneLake Airplane 1:2 1:3 1:1 1:1 1:2 1:1 1:2 4:5 ## 6 Air.6 AirplaneLake Airplane 1:2 1:1 1:1 1:3 1:1 1:1 1:2 4:5 e. Convert to ‘genind’ object We can use the dataframe with the locus objects from gstudio to import the data into a genind object. In this case, we set sep=\":\", because the locus object in gstudio stores the alleles at each locus separated by a colon, and NA.char=\"\", because gstudio stores missing values as empty cells. ## /// GENIND OBJECT ///////// ## ## // 181 individuals; 8 loci; 39 alleles; size: 55.5 Kb ## ## // Basic content ## @tab: 181 x 39 matrix of allele counts ## @loc.n.all: number of alleles per locus (range: 3-9) ## @loc.fac: locus factor for the 39 columns of @tab ## @all.names: list of allele names for each locus ## @ploidy: ploidy of each individual (range: 2-2) ## @type: codom ## @call: adegenet::df2genind(X = Frogs.gstudio[, c(4:11)], sep = &quot;:&quot;, ## ncode = NULL, ind.names = Frogs.gstudio$FrogID, loc.names = NULL, ## pop = Frogs.gstudio$Pop, NA.char = &quot;&quot;, ploidy = 2, type = &quot;codom&quot;, ## strata = NULL, hierarchy = NULL) ## ## // Optional content ## @pop: population of each individual (group size range: 7-23) "],["r-exercise-week-1.html", "R exercise Week 1", " R exercise Week 1 R Notebook: Create a new R Notebook for each weekly exercise. Watch the course video “Week 0: Intro to R Notebooks” as needed. At the end, “knit” it to an html file and view it in your browser. Good news: if you can knit the file, the code can stand by itself (it does not depend on what dyou did in your R session before) and runs without errors. This is a good check. If there are error messages, check the ‘R Markdown’ tab for the code line number and try to fix it. Task: Import the data set pulsatilla_genotypes, which we’ll use in a later lab (Week 14), into gstudio and convert it to a genind object. Data: This file contains microsatellite data for adults and seeds of the herb Pulsatilla vulgaris sampled at seven sites. Reference: DiLeo et al. (2018), Journal of Ecology 106:2242-2255. https://besjournals.onlinelibrary.wiley.com/doi/10.1111/1365-2745.12992 The following code copies the file into the ‘dowloads’ folder in your R project folder: ## [1] FALSE Variables: ID: Family ID (i.e., mother and her offspring have the same ID) OffID: ‘0’ for adults, seeds from the same mom are numbered 1, 2, etc. Population: site ID Coordinates: X and Y coordinates (Projection info: EPSG Projection 31468) Loci: seven diploid microsatellites, each with two columns (1 allele per column) Hints: Load packages: Make sure the following packages are loaded: gstudio, here,tibble and adegenet. View data file: Adapt the code from section 2.c to import the raw data set. The file has a header row. View it. How are the genetic data coded? Import data into gstudio: Adapt the code from section 5.b to import the genetic data with ‘gstudio.’ The loci are in columns 6 - 19. What setting for type is appropriate for this data set? Check the help file for read_population. Check imported data: Use str or as_tibble to check the imported data. Does each variable have the correct data type? Note: there should be 7 variables of type locus. Check variable types: Create a bulleted list, like the one above, with the variables. For each variable, list their R data type (e.g., numeric, integer, character, logical, factor, locus). Check the cheatsheet “R markdown language” as needed. Convert to genind object: Modify the code from section 5.e to convert the data from gstudio to a genind object. Ignore the warning about duplicate labels. Print a summary of the genind object. Question: What is the range of the number of genotyped individuals per population in this dataset? "],["bonus-1a.html", "Bonus: Importing SNP data", " Bonus: Importing SNP data "]]
